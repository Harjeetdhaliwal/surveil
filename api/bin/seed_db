#!/usr/bin/env node

(async function() {
  const {
    Organization,
    User,
    Team,
    ActivityStream,
    ActivityProfile,
    ActivityProfileItem,
  } = require("../src/models");

  // Add user "Jeff Bezos" with owner "Amazon"
  const jeffBezos = await User.create({
    firstName: "Jeff",
    lastName: "Bezos",
    isAdmin: true,
  });

  const amazon = await Organization.create({
    name: "Amazon",
    ownerId: jeffBezos.id,
  });

  jeffBezos.organizationId = amazon.id;
  await jeffBezos.save();

  // Add managers "John Doe" and "Jane Doe" to "Amazon"
  const johnDoe = await User.create({
    firstName: "John",
    lastName: "Doe",
    organizationId: amazon.id,
    isManager: true,
  });

  const janeDoe = await User.create({
    firstName: "Jane",
    lastName: "Doe",
    organizationId: amazon.id,
    isManager: true,
  });

  // Add teams "Data Science" and "Front-end Web Development" to "Amazon"
  const dataScienceTeam = await Team.create({
    name: "Data Science",
    managerId: johnDoe.id,
  });

  const frontEndTeam = await Team.create({
    name: "Front-end Web Development",
    managerId: janeDoe.id,
  });

  // Add "Developer" activity profile
  // {
  const activityProfile = await ActivityProfile.create({ name: "Developer" });
  const activityProfileItemsData = [{
    name: "Github",
    expectedTime: 240,
  }, {
    name: "Facebook",
    expectedTime: 240,
  }, {
    name: "StackOverflow",
    expectedTime: 240,
  }, {
    name: "Draw.io",
    expectedTime: 240,
  }];

  for (const { name, expectedTime } of activityProfileItemsData) {
    await ActivityProfileItem.create({
      name,
      expectedTime,
      activityProfileId: activityProfile.id,
    });
  }
  
  // Add employees to "Data Science"
  const makeAccountEmployeeData = (firstName, lastName) => ({
    firstName,
    lastName,
    teamId: dataScienceTeam.id,
    organizationId: amazon.id,
  });

  const dataScienceEmployees = await User.bulkCreate([
    makeAccountEmployeeData("Edward", "Baker"),
    makeAccountEmployeeData("Neil", "Morgan"),
    makeAccountEmployeeData("Stephanie", "Watson"),
    makeAccountEmployeeData("Bernadette", "Arnold"),
    makeAccountEmployeeData("Gabrielle", "Cameron"),
  ]);

  // Add employees to "Front-end Web Development"
  const makeFrontEndEmployeeData = (firstName, lastName) => ({
    firstName,
    lastName,
    teamId: frontEndTeam.id,
    organizationId: amazon.id,
    activityProfileId: activityProfile.id,
  });

  const frontEndEmployees = await User.bulkCreate([
    makeFrontEndEmployeeData("Fred", "Massey"),
    makeFrontEndEmployeeData("Manuel", "Greene"),
    makeFrontEndEmployeeData("Heather", "Savard"),
    makeFrontEndEmployeeData("Rene", "Lu"),
    makeFrontEndEmployeeData("Matt", "Hamilton"),
  ]);

  // Auto-generate activity profiles for users
  const commonSites = [
    { title: "stackoverflow.com", name: "StackOverflow" },
    { title: "stackexchange.com", name: "StackExchange" },
    { title: "github.com", name: "Github" },
  ];
  const dataScienceSites = [
    ...commonSites,
    { title: "www.tensorflow.org", name: "Tensorflow" },
  ];
  const frontEndSites = [
    ...commonSites,
    { title: "jsfiddle.org", name: "JSFiddle" },
    { title: "draw.io", name: "Draw.io" },
    { title: "lucidchart.com", name: "LucidChart" },
  ];

  const randomRangeInt = (start, end) => {
    return start + Math.floor(Math.random() * (end - start));
  };

  const randomElementUniform = arr => {
    return arr[randomRangeInt(0, arr.length - 1)];
  };

  const generateActivityStream = async function(user, sites) {
    const activityStreamsData = [];
    const nowDate = new Date();

    const runningDate = new Date();
    runningDate.setMonth(runningDate.getMonth() - 1);

    while (runningDate < nowDate) {
      const site = randomElementUniform(sites);
      const duration = randomRangeInt(160, 320);

      const startTime = new Date(runningDate.getTime());
      runningDate.setMinutes(runningDate.getMinutes() + duration);
      const endTime = new Date(runningDate.getTime());

      activityStreamsData.push({
        name: site.name,
        title: site.title,
        startTime,
        endTime,
        userId: user.id,
      });
    }

    await ActivityStream.bulkCreate(activityStreamsData);
  };

  for (const employee of dataScienceEmployees) {
    await generateActivityStream(employee, dataScienceSites);
  }

  for (const employee of frontEndEmployees) {
    await generateActivityStream(employee, frontEndSites);
  }
})();